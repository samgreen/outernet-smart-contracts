{
  "contractName": "SupportsInterface",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of standard for detect smart contract interfaces.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Contract constructor.\"},\"supportsInterface(bytes4)\":{\"details\":\"Function to check which interfaces are suported by this contract.\",\"params\":{\"_interfaceID\":\"Id of the interface.\"},\"returns\":{\"_0\":\"True if _interfaceID is supported, false otherwise.\"}}},\"stateVariables\":{\"supportedInterfaces\":{\"details\":\"Mapping of supported intefraces. You must not set element 0xffffffff to true.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/supports-interface.sol\":\"SupportsInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/erc165.sol\":{\"keccak256\":\"0x4200e6e09ecb88dd6e25a2f20cfb7b629195642759f827167b80e729cd28db2d\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://399a7e65a6b7a22634b14e8580a363062a576a944c65422646599ea1e9f3a976\",\"dweb:/ipfs/QmWSfoALnPfyBCVsyoWmc9P3VHEwgSWM5J9LoU6Rtnnnax\"]},\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/supports-interface.sol\":{\"keccak256\":\"0xe8cabf8538d4c1277694ad96ed34ead54f8aa8d05188c7692cb86e7c0b85ce75\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://4dfe91492cf18e94aac2b8768d4dd5d748906ad7ebfc91f862b4374a519b75a3\",\"dweb:/ipfs/QmQZofj4ggoAZKzZQZyGjNknhVJdXNiavyJg6nYKxH6ELF\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000806301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555061012c806100716000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806301ffc9a714602d575b600080fd5b607560048036036020811015604157600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050608f565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905091905056fea26469706673582212209f2f268f64b4fb053998adbb921fc6ac3b774619871828e50161767d68ebc38d64736f6c634300060b0033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c806301ffc9a714602d575b600080fd5b607560048036036020811015604157600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050608f565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905091905056fea26469706673582212209f2f268f64b4fb053998adbb921fc6ac3b774619871828e50161767d68ebc38d64736f6c634300060b0033",
  "immutableReferences": {},
  "sourceMap": "179:700:17:-:0;;;424:86;;;;;;;;;;491:4;457:19;:31;477:10;457:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;179:700;;;;;;",
  "deployedSourceMap": "179:700:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;713:163;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;817:4;838:19;:33;858:12;838:33;;;;;;;;;;;;;;;;;;;;;;;;;;;831:40;;713:163;;;:::o",
  "source": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.4.25 <0.7.0;\n\nimport \"./erc165.sol\";\n\n/**\n * @dev Implementation of standard for detect smart contract interfaces.\n */\ncontract SupportsInterface is\n  ERC165\n{\n\n  /** @dev Mapping of supported intefraces.\n   * You must not set element 0xffffffff to true.\n   */\n  mapping(bytes4 => bool) internal supportedInterfaces;\n\n  /**\n   * @dev Contract constructor.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0x01ffc9a7] = true; // ERC165\n  }\n\n  /**\n   * @dev Function to check which interfaces are suported by this contract.\n   * @param _interfaceID Id of the interface.\n   * @return True if _interfaceID is supported, false otherwise.\n   */\n  function supportsInterface(\n    bytes4 _interfaceID\n  )\n    external\n    override\n    view\n    returns (bool)\n  {\n    return supportedInterfaces[_interfaceID];\n  }\n\n}\n",
  "sourcePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/supports-interface.sol",
  "ast": {
    "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/supports-interface.sol",
    "exportedSymbols": {
      "SupportsInterface": [
        2058
      ]
    },
    "id": 2059,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2023,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".25",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "40:32:17"
      },
      {
        "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/erc165.sol",
        "file": "./erc165.sol",
        "id": 2024,
        "nodeType": "ImportDirective",
        "scope": 2059,
        "sourceUnit": 2022,
        "src": "74:22:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2026,
              "name": "ERC165",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2021,
              "src": "211:6:17",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC165_$2021",
                "typeString": "contract ERC165"
              }
            },
            "id": 2027,
            "nodeType": "InheritanceSpecifier",
            "src": "211:6:17"
          }
        ],
        "contractDependencies": [
          2021
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 2025,
          "nodeType": "StructuredDocumentation",
          "src": "98:80:17",
          "text": " @dev Implementation of standard for detect smart contract interfaces."
        },
        "fullyImplemented": true,
        "id": 2058,
        "linearizedBaseContracts": [
          2058,
          2021
        ],
        "name": "SupportsInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 2028,
              "nodeType": "StructuredDocumentation",
              "src": "223:97:17",
              "text": "@dev Mapping of supported intefraces.\n You must not set element 0xffffffff to true."
            },
            "id": 2032,
            "mutability": "mutable",
            "name": "supportedInterfaces",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 2058,
            "src": "323:52:17",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
              "typeString": "mapping(bytes4 => bool)"
            },
            "typeName": {
              "id": 2031,
              "keyType": {
                "id": 2029,
                "name": "bytes4",
                "nodeType": "ElementaryTypeName",
                "src": "331:6:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes4",
                  "typeString": "bytes4"
                }
              },
              "nodeType": "Mapping",
              "src": "323:23:17",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                "typeString": "mapping(bytes4 => bool)"
              },
              "valueType": {
                "id": 2030,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "341:4:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2042,
              "nodeType": "Block",
              "src": "451:59:17",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2040,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 2036,
                        "name": "supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2032,
                        "src": "457:19:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 2038,
                      "indexExpression": {
                        "argumentTypes": null,
                        "hexValue": "30783031666663396137",
                        "id": 2037,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "477:10:17",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_33540519_by_1",
                          "typeString": "int_const 33540519"
                        },
                        "value": "0x01ffc9a7"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "457:31:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 2039,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "491:4:17",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "457:38:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2041,
                  "nodeType": "ExpressionStatement",
                  "src": "457:38:17"
                }
              ]
            },
            "documentation": {
              "id": 2033,
              "nodeType": "StructuredDocumentation",
              "src": "380:41:17",
              "text": " @dev Contract constructor."
            },
            "id": 2043,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2034,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "435:2:17"
            },
            "returnParameters": {
              "id": 2035,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "451:0:17"
            },
            "scope": 2058,
            "src": "424:86:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              2020
            ],
            "body": {
              "id": 2056,
              "nodeType": "Block",
              "src": "825:51:17",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 2052,
                      "name": "supportedInterfaces",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2032,
                      "src": "838:19:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                        "typeString": "mapping(bytes4 => bool)"
                      }
                    },
                    "id": 2054,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 2053,
                      "name": "_interfaceID",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2046,
                      "src": "858:12:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "838:33:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2051,
                  "id": 2055,
                  "nodeType": "Return",
                  "src": "831:40:17"
                }
              ]
            },
            "documentation": {
              "id": 2044,
              "nodeType": "StructuredDocumentation",
              "src": "514:196:17",
              "text": " @dev Function to check which interfaces are suported by this contract.\n @param _interfaceID Id of the interface.\n @return True if _interfaceID is supported, false otherwise."
            },
            "functionSelector": "01ffc9a7",
            "id": 2057,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 2048,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "786:8:17"
            },
            "parameters": {
              "id": 2047,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2046,
                  "mutability": "mutable",
                  "name": "_interfaceID",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 2057,
                  "src": "745:19:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 2045,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "745:6:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "739:29:17"
            },
            "returnParameters": {
              "id": 2051,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2050,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 2057,
                  "src": "817:4:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2049,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "817:4:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "816:6:17"
            },
            "scope": 2058,
            "src": "713:163:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2059,
        "src": "179:700:17"
      }
    ],
    "src": "40:840:17"
  },
  "legacyAST": {
    "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/supports-interface.sol",
    "exportedSymbols": {
      "SupportsInterface": [
        2058
      ]
    },
    "id": 2059,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2023,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".25",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "40:32:17"
      },
      {
        "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/erc165.sol",
        "file": "./erc165.sol",
        "id": 2024,
        "nodeType": "ImportDirective",
        "scope": 2059,
        "sourceUnit": 2022,
        "src": "74:22:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 2026,
              "name": "ERC165",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2021,
              "src": "211:6:17",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC165_$2021",
                "typeString": "contract ERC165"
              }
            },
            "id": 2027,
            "nodeType": "InheritanceSpecifier",
            "src": "211:6:17"
          }
        ],
        "contractDependencies": [
          2021
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 2025,
          "nodeType": "StructuredDocumentation",
          "src": "98:80:17",
          "text": " @dev Implementation of standard for detect smart contract interfaces."
        },
        "fullyImplemented": true,
        "id": 2058,
        "linearizedBaseContracts": [
          2058,
          2021
        ],
        "name": "SupportsInterface",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 2028,
              "nodeType": "StructuredDocumentation",
              "src": "223:97:17",
              "text": "@dev Mapping of supported intefraces.\n You must not set element 0xffffffff to true."
            },
            "id": 2032,
            "mutability": "mutable",
            "name": "supportedInterfaces",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 2058,
            "src": "323:52:17",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
              "typeString": "mapping(bytes4 => bool)"
            },
            "typeName": {
              "id": 2031,
              "keyType": {
                "id": 2029,
                "name": "bytes4",
                "nodeType": "ElementaryTypeName",
                "src": "331:6:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes4",
                  "typeString": "bytes4"
                }
              },
              "nodeType": "Mapping",
              "src": "323:23:17",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                "typeString": "mapping(bytes4 => bool)"
              },
              "valueType": {
                "id": 2030,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "341:4:17",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 2042,
              "nodeType": "Block",
              "src": "451:59:17",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 2040,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 2036,
                        "name": "supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2032,
                        "src": "457:19:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 2038,
                      "indexExpression": {
                        "argumentTypes": null,
                        "hexValue": "30783031666663396137",
                        "id": 2037,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "477:10:17",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_33540519_by_1",
                          "typeString": "int_const 33540519"
                        },
                        "value": "0x01ffc9a7"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "457:31:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 2039,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "491:4:17",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "457:38:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 2041,
                  "nodeType": "ExpressionStatement",
                  "src": "457:38:17"
                }
              ]
            },
            "documentation": {
              "id": 2033,
              "nodeType": "StructuredDocumentation",
              "src": "380:41:17",
              "text": " @dev Contract constructor."
            },
            "id": 2043,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 2034,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "435:2:17"
            },
            "returnParameters": {
              "id": 2035,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "451:0:17"
            },
            "scope": 2058,
            "src": "424:86:17",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              2020
            ],
            "body": {
              "id": 2056,
              "nodeType": "Block",
              "src": "825:51:17",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 2052,
                      "name": "supportedInterfaces",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2032,
                      "src": "838:19:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                        "typeString": "mapping(bytes4 => bool)"
                      }
                    },
                    "id": 2054,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 2053,
                      "name": "_interfaceID",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2046,
                      "src": "858:12:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "838:33:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 2051,
                  "id": 2055,
                  "nodeType": "Return",
                  "src": "831:40:17"
                }
              ]
            },
            "documentation": {
              "id": 2044,
              "nodeType": "StructuredDocumentation",
              "src": "514:196:17",
              "text": " @dev Function to check which interfaces are suported by this contract.\n @param _interfaceID Id of the interface.\n @return True if _interfaceID is supported, false otherwise."
            },
            "functionSelector": "01ffc9a7",
            "id": 2057,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 2048,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "786:8:17"
            },
            "parameters": {
              "id": 2047,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2046,
                  "mutability": "mutable",
                  "name": "_interfaceID",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 2057,
                  "src": "745:19:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 2045,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "745:6:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "739:29:17"
            },
            "returnParameters": {
              "id": 2051,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 2050,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 2057,
                  "src": "817:4:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 2049,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "817:4:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "816:6:17"
            },
            "scope": 2058,
            "src": "713:163:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 2059,
        "src": "179:700:17"
      }
    ],
    "src": "40:840:17"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.11+commit.5ef660b1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.2",
  "updatedAt": "2020-07-18T09:49:54.785Z",
  "devdoc": {
    "details": "Implementation of standard for detect smart contract interfaces.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Contract constructor."
      },
      "supportsInterface(bytes4)": {
        "details": "Function to check which interfaces are suported by this contract.",
        "params": {
          "_interfaceID": "Id of the interface."
        },
        "returns": {
          "_0": "True if _interfaceID is supported, false otherwise."
        }
      }
    },
    "stateVariables": {
      "supportedInterfaces": {
        "details": "Mapping of supported intefraces. You must not set element 0xffffffff to true."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}