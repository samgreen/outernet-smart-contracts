{
  "contractName": "NFTokenMetadata",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Optional metadata implementation for ERC-721 non-fungible token standard.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. This function can be changed to payable.\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\",\"_tokenId\":\"ID of the token to be approved.\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.\",\"params\":{\"_owner\":\"Address for whom to query the balance.\"},\"returns\":{\"_0\":\"Balance of _owner.\"}},\"constructor\":{\"details\":\"Contract constructor.\"},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\"},\"returns\":{\"_0\":\"Address that _tokenId is approved for.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\",\"_owner\":\"The address that owns the NFTs.\"},\"returns\":{\"_0\":\"True if approved for all, false otherwise.\"}},\"name()\":{\"details\":\"Returns a descriptive name for a collection of NFTokens.\",\"returns\":{\"_name\":\"Representing name.\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\"},\"returns\":{\"_owner\":\"Address of _tokenId owner.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\",\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\",\"_operator\":\"Address to add to the set of authorized operators.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Function to check which interfaces are suported by this contract.\",\"params\":{\"_interfaceID\":\"Id of the interface.\"},\"returns\":{\"_0\":\"True if _interfaceID is supported, false otherwise.\"}},\"symbol()\":{\"details\":\"Returns an abbreviated name for NFTokens.\",\"returns\":{\"_symbol\":\"Representing symbol.\"}},\"tokenURI(uint256)\":{\"details\":\"A distinct URI (RFC 3986) for a given NFT.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"},\"returns\":{\"_0\":\"URI of _tokenId.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}}},\"stateVariables\":{\"idToUri\":{\"details\":\"Mapping from NFT ID to metadata uri.\"},\"nftName\":{\"details\":\"A descriptive name for a collection of NFTs.\"},\"nftSymbol\":{\"details\":\"An abbreviated name for NFTokens.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\"},\"constructor\":\"When implementing this contract don't forget to set nftName and nftSymbol.\",\"getApproved(uint256)\":{\"notice\":\"Throws if `_tokenId` is not a valid NFT.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"This works identically to the other function with an extra data parameter, except this function just sets data to \\\"\\\"\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/nf-token-metadata.sol\":\"NFTokenMetadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/math/safe-math.sol\":{\"keccak256\":\"0xee6225d2e0d629f8cd2b499ac7ec1deb5c5cbbf6b76b48817288f95d95532a4b\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://ce759ad4b88f01970912d2fda13a95f82d8729104b15ef88916e4e1c7344967f\",\"dweb:/ipfs/QmavG8r35rWGL9NELDoegDdnkeCA1TeMiaJBhWK8iAjcqg\"]},\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/erc721-metadata.sol\":{\"keccak256\":\"0x3fb28732b89c95a5e30f11ce25e16f8def703e39854cb81e40f0a3331e7ba1b8\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://df4e4c737d36e3b85170ba5fb044c38d50409c92b1870695b560e7af93b468d8\",\"dweb:/ipfs/QmTxkLfzDRNLhhwXPkY5FYjQioiVxQLZPpisVFrdJKpoj7\"]},\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/erc721-token-receiver.sol\":{\"keccak256\":\"0xde219c33e957b76ef8f946835194e7b80294cb034e0b59b51fd361addd021c6c\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://e625a544cc9689c17ea6226f2fad757f56a1cdf794f485e63740231324ab88b6\",\"dweb:/ipfs/Qmd2xWP2TRDLCwgYczXDFpQrJH1KUo5SgknihYExe8Kg1s\"]},\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/erc721.sol\":{\"keccak256\":\"0x04851b59bc2bce307cf06d7160fe9bcbf7de15b767c3caca25145753413da7b7\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://c5e11efc3fbf19adde39c2365b6cd160bb5dce2d917eae747b464eb4cd2d04da\",\"dweb:/ipfs/QmbowqJJAzkyDK49Jh5koD7GScKqHXL63EsL4CsoFL2ZVW\"]},\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/nf-token-metadata.sol\":{\"keccak256\":\"0xa23b8407ead8e7abfc08d76f4d47b6d655d8e6257c0942d62b70f6e3b5c4a6a8\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://444855d4006cce430bf3f21df8a6655d31a1ef64782886705031d0292e1caaba\",\"dweb:/ipfs/QmYQ9Gq7FiBNhZiZ9Rr7XYVCzuV1nCgEFxqkKjtCbwxNjU\"]},\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/nf-token.sol\":{\"keccak256\":\"0x7d1b6f31db7dfa380fab3459d5adbec7f01ca6b7289f4e173a53776db9181a49\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://c8b53b959b1291fa9c9e55b199c79b8f8aca1a87bedf096a3f0d3865c1f58e8c\",\"dweb:/ipfs/QmZXuSHkvXnuKXLA9Magz5xXQsQwitx18XLi8KCdETJDSt\"]},\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/address-utils.sol\":{\"keccak256\":\"0xeb1dcce23c6ba85f2c8d36b171308c42754b90a6cb31845b2a6c2054df05b926\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://bd966e549350b9d797579c1740ebc53d429cf53b72e7ccbd29c3ca16d654f265\",\"dweb:/ipfs/QmXgoR6JdBco56HA3iYdDtZk5EvAj4PFrR4Gg1WCJFeUoW\"]},\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/erc165.sol\":{\"keccak256\":\"0x4200e6e09ecb88dd6e25a2f20cfb7b629195642759f827167b80e729cd28db2d\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://399a7e65a6b7a22634b14e8580a363062a576a944c65422646599ea1e9f3a976\",\"dweb:/ipfs/QmWSfoALnPfyBCVsyoWmc9P3VHEwgSWM5J9LoU6Rtnnnax\"]},\"/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/utils/supports-interface.sol\":{\"keccak256\":\"0xe8cabf8538d4c1277694ad96ed34ead54f8aa8d05188c7692cb86e7c0b85ce75\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://4dfe91492cf18e94aac2b8768d4dd5d748906ad7ebfc91f862b4374a519b75a3\",\"dweb:/ipfs/QmQZofj4ggoAZKzZQZyGjNknhVJdXNiavyJg6nYKxH6ELF\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb4651461049d578063b88d4fde146104ed578063c87b56dd146105b0578063e985e9c514610657576100cf565b80636352211e1461035457806370a08231146103c257806395d89b411461041a576100cf565b806301ffc9a7146100d457806306fdde0314610139578063081812fc146101bc578063095ea7b31461022a57806323b872dd1461027857806342842e0e146102e6575b600080fd5b61011f600480360360208110156100ea57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506106d3565b604051808215151515815260200191505060405180910390f35b61014161073a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610181578082015181840152602081019050610166565b50505050905090810190601f1680156101ae5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101e8600480360360208110156101d257600080fd5b81019080803590602001909291905050506107dc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102766004803603604081101561024057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061095c565b005b6102e46004803603606081101561028e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e6e565b005b610352600480360360608110156102fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611454565b005b6103806004803603602081101561036a57600080fd5b8101908080359060200190929190505050611474565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610404600480360360208110156103d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115bf565b6040518082815260200191505060405180910390f35b6104226116de565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610462578082015181840152602081019050610447565b50505050905090810190601f16801561048f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104eb600480360360408110156104b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611780565b005b6105ae6004803603608081101561050357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561056a57600080fd5b82018360208201111561057c57600080fd5b8035906020019184600183028401116401000000008311171561059e57600080fd5b9091929391929390505050611881565b005b6105dc600480360360208110156105c657600080fd5b81019080803590602001909291905050506118d8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561061c578082015181840152602081019050610601565b50505050905090810190601f1680156106495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106b96004803603604081101561066d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611ad0565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f30303330303200000000000000000000000000000000000000000000000000008152509061091f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108e45780820151818401526020810190506108c9565b50505050905090810190601f1680156109115780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b8060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610a555750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6040518060400160405280600681526020017f303033303033000000000000000000000000000000000000000000000000000081525090610b31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610af6578082015181840152602081019050610adb565b50505050905090810190601f168015610b235780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303032000000000000000000000000000000000000000000000000000081525090610c73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c38578082015181840152602081019050610c1d565b50505050905090810190601f168015610c655780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303038000000000000000000000000000000000000000000000000000081525090610db8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d7d578082015181840152602081019050610d62565b50505050905090810190601f168015610daa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50856002600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b8060006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610f3f57503373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80610fd05750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6040518060400160405280600681526020017f3030333030340000000000000000000000000000000000000000000000000000815250906110ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611071578082015181840152602081019050611056565b50505050905090810190601f16801561109e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5082600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030320000000000000000000000000000000000000000000000000000815250906111ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156111b3578082015181840152602081019050611198565b50505050905090810190601f1680156111e05780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f303033303037000000000000000000000000000000000000000000000000000081525090611332576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112f75780820151818401526020810190506112dc565b50505050905090810190601f1680156113245780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303031000000000000000000000000000000000000000000000000000081525090611440576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114055780820151818401526020810190506113ea565b50505050905090810190601f1680156114325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5061144b8686611b64565b50505050505050565b61146f83838360405180602001604052806000815250611c19565b505050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030320000000000000000000000000000000000000000000000000000815250906115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561157e578082015181840152602081019050611563565b50505050905090810190601f1680156115ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030310000000000000000000000000000000000000000000000000000815250906116cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611692578082015181840152602081019050611677565b50505050905090810190601f1680156116bf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506116d7826124b2565b9050919050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117765780601f1061174b57610100808354040283529160200191611776565b820191906000526020600020905b81548152906001019060200180831161175957829003601f168201915b5050505050905090565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6118d185858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611c19565b5050505050565b606081600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303032000000000000000000000000000000000000000000000000000081525090611a1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156119e05780820151818401526020810190506119c5565b50505050905090810190601f168015611a0d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600760008481526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ac35780601f10611a9857610100808354040283529160200191611ac3565b820191906000526020600020905b815481529060010190602001808311611aa657829003601f168201915b5050505050915050919050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611ba5826124fb565b611baf818361259c565b611bb9838361279b565b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b8160006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480611cea57503373ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80611d7b5750600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6040518060400160405280600681526020017f303033303034000000000000000000000000000000000000000000000000000081525090611e57576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e1c578082015181840152602081019050611e01565b50505050905090810190601f168015611e495780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5083600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f303033303032000000000000000000000000000000000000000000000000000081525090611f99576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611f5e578082015181840152602081019050611f43565b50505050905090810190601f168015611f8b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060006001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f3030333030370000000000000000000000000000000000000000000000000000815250906120dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156120a2578082015181840152602081019050612087565b50505050905090810190601f1680156120cf5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156040518060400160405280600681526020017f3030333030310000000000000000000000000000000000000000000000000000815250906121eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121b0578082015181840152602081019050612195565b50505050905090810190601f1680156121dd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506121f68787611b64565b6122158773ffffffffffffffffffffffffffffffffffffffff166129c7565b156124a85760008773ffffffffffffffffffffffffffffffffffffffff1663150b7a02338b8a8a6040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156122f55780820151818401526020810190506122da565b50505050905090810190601f1680156123225780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561234457600080fd5b505af1158015612358573d6000803e3d6000fd5b505050506040513d602081101561236e57600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146040518060400160405280600681526020017f3030333030350000000000000000000000000000000000000000000000000000815250906124a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561246a57808201518184015260208101905061244f565b50505050905090810190601f1680156124975780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505b5050505050505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612599576002600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b50565b8173ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f3030333030370000000000000000000000000000000000000000000000000000815250906126da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561269f578082015181840152602081019050612684565b50505050905090810190601f1680156126cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146040518060400160405280600681526020017f3030333030360000000000000000000000000000000000000000000000000000815250906128da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561289f578082015181840152602081019050612884565b50505050905090810190601f1680156128cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506129806001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a1290919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008060007fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060001b9050833f91506000801b8214158015612a095750808214155b92505050919050565b60008183019050828110156040518060400160405280600681526020017f303038303031000000000000000000000000000000000000000000000000000081525090612af9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612abe578082015181840152602081019050612aa3565b50505050905090810190601f168015612aeb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509291505056fea264697066735822122084b66740c2347f9b4917c7104379212f0eff0ca643de8cc90b535e19daa7331964736f6c634300060b0033",
  "immutableReferences": {},
  "sourceMap": "222:2492:13:-:0;;;704:94;;;;;;;;;;491:4:17;457:19;:31;477:10;457:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;4580:4:14;4546:19;:31;4566:10;4546:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;771:4:13;737:19;:31;757:10;737:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;222:2492;;;;;;",
  "deployedSourceMap": "222:2492:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;713:163:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;919:113:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9676:173:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7541:338;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6791;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6055:170;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;9242:198;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8790:194;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1142:121:13;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8281:223:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5457:199;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1409:171:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10110:182:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;713:163:17;817:4;838:19;:33;858:12;838:33;;;;;;;;;;;;;;;;;;;;;;;;;;;831:40;;713:163;;;:::o;919:113:13:-;983:19;1020:7;1012:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;919:113;:::o;9676:173:14:-;9798:7;9775:8;4435:1;4404:33;;:9;:19;4414:8;4404:19;;;;;;;;;;;;;;;;;;;;;:33;;;;4439:13;;;;;;;;;;;;;;;;;4396:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9822:12:::1;:22;9835:8;9822:22;;;;;;;;;;;;;;;;;;;;;9815:29;;9676:173:::0;;;;:::o;7541:338::-;7648:8;3640:18;3661:9;:19;3671:8;3661:19;;;;;;;;;;;;;;;;;;;;;3640:40;;3708:10;3694:24;;:10;:24;;;:68;;;;3722:16;:28;3739:10;3722:28;;;;;;;;;;;;;;;:40;3751:10;3722:40;;;;;;;;;;;;;;;;;;;;;;;;;3694:68;3764:21;;;;;;;;;;;;;;;;;3686:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7675:8:::1;4435:1;4404:33;;:9;:19;4414:8;4404:19;;;;;;;;;;;;;;;;;;;;;:33;;;;4439:13;;;;;;;;;;;;;;;;::::0;4396:57:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7693:18:::2;7714:9;:19;7724:8;7714:19;;;;;;;;;;;;;;;;;;;;;7693:40;;7760:10;7747:23;;:9;:23;;;;7772:8;;;;;;;;;;;;;;;;::::0;7739:42:::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7813:9;7788:12;:22;7801:8;7788:22;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;7865:8;7854:9;7833:41;;7842:10;7833:41;;;;;;;;;;;;4459:1;3792::::1;7541:338:::0;;;;:::o;6791:::-;6917:8;3986:18;4007:9;:19;4017:8;4007:19;;;;;;;;;;;;;;;;;;;;;3986:40;;4061:10;4047:24;;:10;:24;;;:70;;;;4107:10;4081:36;;:12;:22;4094:8;4081:22;;;;;;;;;;;;;;;;;;;;;:36;;;4047:70;:120;;;;4127:16;:28;4144:10;4127:28;;;;;;;;;;;;;;;:40;4156:10;4127:40;;;;;;;;;;;;;;;;;;;;;;;;;4047:120;4175:30;;;;;;;;;;;;;;;;;4032:179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6944:8:::1;4435:1;4404:33;;:9;:19;4414:8;4404:19;;;;;;;;;;;;;;;;;;;;;:33;;;;4439:13;;;;;;;;;;;;;;;;::::0;4396:57:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6962:18:::2;6983:9;:19;6993:8;6983:19;;;;;;;;;;;;;;;;;;;;;6962:40;;7030:5;7016:19;;:10;:19;;;7037:9;;;;;;;;;;;;;;;;::::0;7008:39:::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7076:1;7061:17;;:3;:17;;;;7080:12;;;;;;;;;;;;;;;;::::0;7053:40:::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7100:24;7110:3;7115:8;7100:9;:24::i;:::-;4459:1;4217::::1;6791:338:::0;;;;;:::o;6055:170::-;6177:43;6195:5;6202:3;6207:8;6177:43;;;;;;;;;;;;:17;:43::i;:::-;6055:170;;;:::o;9242:198::-;9333:14;9366:9;:19;9376:8;9366:19;;;;;;;;;;;;;;;;;;;;;9357:28;;9417:1;9399:20;;:6;:20;;;;9421:13;;;;;;;;;;;;;;;;;9391:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9242:198;;;:::o;8790:194::-;8881:7;8924:1;8906:20;;:6;:20;;;;8928:12;;;;;;;;;;;;;;;;;8898:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8954:25;8972:6;8954:17;:25::i;:::-;8947:32;;8790:194;;;:::o;1142:121:13:-;1208:21;1249:9;1239:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1142:121;:::o;8281:223:14:-;8431:9;8389:16;:28;8406:10;8389:28;;;;;;;;;;;;;;;:39;8418:9;8389:39;;;;;;;;;;;;;;;;:51;;;;;;;;;;;;;;;;;;8478:9;8451:48;;8466:10;8451:48;;;8489:9;8451:48;;;;;;;;;;;;;;;;;;;;;;8281:223;;:::o;5457:199::-;5605:46;5623:5;5630:3;5635:8;5645:5;;5605:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:17;:46::i;:::-;5457:199;;;;;:::o;1409:171:13:-;1528:13;1505:8;4435:1:14;4404:33;;:9;:19;4414:8;4404:19;;;;;;;;;;;;;;;;;;;;;:33;;;;4439:13;;;;;;;;;;;;;;;;;4396:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1558:7:13::1;:17;1566:8;1558:17;;;;;;;;;;;1551:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1409:171:::0;;;;:::o;10110:182:14:-;10231:4;10252:16;:24;10269:6;10252:24;;;;;;;;;;;;;;;:35;10277:9;10252:35;;;;;;;;;;;;;;;;;;;;;;;;;10245:42;;10110:182;;;;:::o;10475:262::-;10558:12;10573:9;:19;10583:8;10573:19;;;;;;;;;;;;;;;;;;;;;10558:34;;10598:24;10613:8;10598:14;:24::i;:::-;10629:30;10644:4;10650:8;10629:14;:30::i;:::-;10665:26;10677:3;10682:8;10665:11;:26::i;:::-;10723:8;10718:3;10703:29;;10712:4;10703:29;;;;;;;;;;;;10475:262;;;:::o;13814:569::-;13955:8;3986:18;4007:9;:19;4017:8;4007:19;;;;;;;;;;;;;;;;;;;;;3986:40;;4061:10;4047:24;;:10;:24;;;:70;;;;4107:10;4081:36;;:12;:22;4094:8;4081:22;;;;;;;;;;;;;;;;;;;;;:36;;;4047:70;:120;;;;4127:16;:28;4144:10;4127:28;;;;;;;;;;;;;;;:40;4156:10;4127:40;;;;;;;;;;;;;;;;;;;;;;;;;4047:120;4175:30;;;;;;;;;;;;;;;;;4032:179;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13982:8:::1;4435:1;4404:33;;:9;:19;4414:8;4404:19;;;;;;;;;;;;;;;;;;;;;:33;;;;4439:13;;;;;;;;;;;;;;;;::::0;4396:57:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14000:18:::2;14021:9;:19;14031:8;14021:19;;;;;;;;;;;;;;;;;;;;;14000:40;;14068:5;14054:19;;:10;:19;;;14075:9;;;;;;;;;;;;;;;;::::0;14046:39:::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14114:1;14099:17;;:3;:17;;;;14118:12;;;;;;;;;;;;;;;;::::0;14091:40:::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14138:24;14148:3;14153:8;14138:9;:24::i;:::-;14173:16;:3;:14;;;:16::i;:::-;14169:210;;;14203:13;14239:3;14219:41;;;14261:10;14273:5;14280:8;14290:5;14219:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;14203:93;;1190:10;14322:24;;14312:34;;;:6;:34;;;;14348:23;;;;;;;;;;;;;;;;::::0;14304:68:::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14169:210;;4459:1;4217::::1;13814:569:::0;;;;;;:::o;13391:154::-;13489:7;13513:19;:27;13533:6;13513:27;;;;;;;;;;;;;;;;13506:34;;13391:154;;;:::o;14510:164::-;14618:1;14584:36;;:12;:22;14597:8;14584:22;;;;;;;;;;;;;;;;;;;;;:36;;;14580:90;;14641:12;:22;14654:8;14641:22;;;;;;;;;;;;14634:29;;;;;;;;;;;14580:90;14510:164;:::o;12332:252::-;12465:5;12442:28;;:9;:19;12452:8;12442:19;;;;;;;;;;;;;;;;;;;;;:28;;;12472:9;;;;;;;;;;;;;;;;;12434:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12546:1;12517:19;:26;12537:5;12517:26;;;;;;;;;;;;;;;;:30;12488:19;:26;12508:5;12488:26;;;;;;;;;;;;;;;:59;;;;12560:9;:19;12570:8;12560:19;;;;;;;;;;;;12553:26;;;;;;;;;;;12332:252;;:::o;12843:260::-;12979:1;12948:33;;:9;:19;12958:8;12948:19;;;;;;;;;;;;;;;;;;;;;:33;;;12983:18;;;;;;;;;;;;;;;;;12940:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13031:3;13009:9;:19;13019:8;13009:19;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;13067:31;13096:1;13067:19;:24;13087:3;13067:24;;;;;;;;;;;;;;;;:28;;:31;;;;:::i;:::-;13040:19;:24;13060:3;13040:24;;;;;;;;;;;;;;;:58;;;;12843:260;;:::o;484:762:15:-;562:17;994:16;1016:19;1038:66;1016:88;;;;1145:5;1133:18;1121:30;;1210:3;1198:15;;:8;:15;;:42;;;;;1229:11;1217:8;:23;;1198:42;1182:59;;484:762;;;;;:::o;2515:187:2:-;2611:11;2649:8;2638;:19;2632:25;;2678:8;2671:3;:15;;2688:8;;;;;;;;;;;;;;;;;2663:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2515:187;;;;:::o",
  "source": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.4.25 <0.7.0;\n\nimport \"./nf-token.sol\";\nimport \"./erc721-metadata.sol\";\n\n/**\n * @dev Optional metadata implementation for ERC-721 non-fungible token standard.\n */\ncontract NFTokenMetadata is\n  NFToken,\n  ERC721Metadata\n{\n\n  /**\n   * @dev A descriptive name for a collection of NFTs.\n   */\n  string internal nftName;\n\n  /**\n   * @dev An abbreviated name for NFTokens.\n   */\n  string internal nftSymbol;\n\n  /**\n   * @dev Mapping from NFT ID to metadata uri.\n   */\n  mapping (uint256 => string) internal idToUri;\n\n  /**\n   * @dev Contract constructor.\n   * @notice When implementing this contract don't forget to set nftName and nftSymbol.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\n  }\n\n  /**\n   * @dev Returns a descriptive name for a collection of NFTokens.\n   * @return _name Representing name.\n   */\n  function name()\n    external\n    override\n    view\n    returns (string memory _name)\n  {\n    _name = nftName;\n  }\n\n  /**\n   * @dev Returns an abbreviated name for NFTokens.\n   * @return _symbol Representing symbol.\n   */\n  function symbol()\n    external\n    override\n    view\n    returns (string memory _symbol)\n  {\n    _symbol = nftSymbol;\n  }\n\n  /**\n   * @dev A distinct URI (RFC 3986) for a given NFT.\n   * @param _tokenId Id for which we want uri.\n   * @return URI of _tokenId.\n   */\n  function tokenURI(\n    uint256 _tokenId\n  )\n    external\n    override\n    view\n    validNFToken(_tokenId)\n    returns (string memory)\n  {\n    return idToUri[_tokenId];\n  }\n\n  /**\n   * @dev Burns a NFT.\n   * @notice This is an internal function which should be called from user-implemented external\n   * burn function. Its purpose is to show and properly initialize data structures when using this\n   * implementation. Also, note that this burn implementation allows the minter to re-mint a burned\n   * NFT.\n   * @param _tokenId ID of the NFT to be burned.\n   */\n  function _burn(\n    uint256 _tokenId\n  )\n    internal\n    override\n    virtual\n  {\n    super._burn(_tokenId);\n\n    if (bytes(idToUri[_tokenId]).length != 0)\n    {\n      delete idToUri[_tokenId];\n    }\n  }\n\n  /**\n   * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\n   * @notice This is an internal function which should be called from user-implemented external\n   * function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _tokenId Id for which we want uri.\n   * @param _uri String representing RFC 3986 URI.\n   */\n  function _setTokenUri(\n    uint256 _tokenId,\n    string memory _uri\n  )\n    internal\n    validNFToken(_tokenId)\n  {\n    idToUri[_tokenId] = _uri;\n  }\n\n}\n",
  "sourcePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/nf-token-metadata.sol",
  "ast": {
    "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/nf-token-metadata.sol",
    "exportedSymbols": {
      "NFTokenMetadata": [
        1257
      ]
    },
    "id": 1258,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1138,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".25",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "40:32:13"
      },
      {
        "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/nf-token.sol",
        "file": "./nf-token.sol",
        "id": 1139,
        "nodeType": "ImportDirective",
        "scope": 1258,
        "sourceUnit": 1978,
        "src": "74:24:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/erc721-metadata.sol",
        "file": "./erc721-metadata.sol",
        "id": 1140,
        "nodeType": "ImportDirective",
        "scope": 1258,
        "sourceUnit": 679,
        "src": "99:31:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1142,
              "name": "NFToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1977,
              "src": "252:7:13",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NFToken_$1977",
                "typeString": "contract NFToken"
              }
            },
            "id": 1143,
            "nodeType": "InheritanceSpecifier",
            "src": "252:7:13"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1144,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 678,
              "src": "263:14:13",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$678",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 1145,
            "nodeType": "InheritanceSpecifier",
            "src": "263:14:13"
          }
        ],
        "contractDependencies": [
          678,
          809,
          1977,
          2021,
          2058
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 1141,
          "nodeType": "StructuredDocumentation",
          "src": "132:89:13",
          "text": " @dev Optional metadata implementation for ERC-721 non-fungible token standard."
        },
        "fullyImplemented": true,
        "id": 1257,
        "linearizedBaseContracts": [
          1257,
          678,
          1977,
          2058,
          2021,
          809
        ],
        "name": "NFTokenMetadata",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 1146,
              "nodeType": "StructuredDocumentation",
              "src": "283:64:13",
              "text": " @dev A descriptive name for a collection of NFTs."
            },
            "id": 1148,
            "mutability": "mutable",
            "name": "nftName",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1257,
            "src": "350:23:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1147,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "350:6:13",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1149,
              "nodeType": "StructuredDocumentation",
              "src": "378:53:13",
              "text": " @dev An abbreviated name for NFTokens."
            },
            "id": 1151,
            "mutability": "mutable",
            "name": "nftSymbol",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1257,
            "src": "434:25:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1150,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "434:6:13",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1152,
              "nodeType": "StructuredDocumentation",
              "src": "464:56:13",
              "text": " @dev Mapping from NFT ID to metadata uri."
            },
            "id": 1156,
            "mutability": "mutable",
            "name": "idToUri",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1257,
            "src": "523:44:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
              "typeString": "mapping(uint256 => string)"
            },
            "typeName": {
              "id": 1155,
              "keyType": {
                "id": 1153,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "532:7:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "523:27:13",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                "typeString": "mapping(uint256 => string)"
              },
              "valueType": {
                "id": 1154,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "543:6:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1166,
              "nodeType": "Block",
              "src": "731:67:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1160,
                        "name": "supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2032,
                        "src": "737:19:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 1162,
                      "indexExpression": {
                        "argumentTypes": null,
                        "hexValue": "30783562356531333966",
                        "id": 1161,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "757:10:13",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1532892063_by_1",
                          "typeString": "int_const 1532892063"
                        },
                        "value": "0x5b5e139f"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "737:31:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1163,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "771:4:13",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "737:38:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1165,
                  "nodeType": "ExpressionStatement",
                  "src": "737:38:13"
                }
              ]
            },
            "documentation": {
              "id": 1157,
              "nodeType": "StructuredDocumentation",
              "src": "572:129:13",
              "text": " @dev Contract constructor.\n @notice When implementing this contract don't forget to set nftName and nftSymbol."
            },
            "id": 1167,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1158,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "715:2:13"
            },
            "returnParameters": {
              "id": 1159,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "731:0:13"
            },
            "scope": 1257,
            "src": "704:94:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              663
            ],
            "body": {
              "id": 1178,
              "nodeType": "Block",
              "src": "1006:26:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1176,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1174,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1172,
                      "src": "1012:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1175,
                      "name": "nftName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1148,
                      "src": "1020:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "1012:15:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1177,
                  "nodeType": "ExpressionStatement",
                  "src": "1012:15:13"
                }
              ]
            },
            "documentation": {
              "id": 1168,
              "nodeType": "StructuredDocumentation",
              "src": "802:114:13",
              "text": " @dev Returns a descriptive name for a collection of NFTokens.\n @return _name Representing name."
            },
            "functionSelector": "06fdde03",
            "id": 1179,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1170,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "952:8:13"
            },
            "parameters": {
              "id": 1169,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "932:2:13"
            },
            "returnParameters": {
              "id": 1173,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1172,
                  "mutability": "mutable",
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1179,
                  "src": "983:19:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1171,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "983:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "982:21:13"
            },
            "scope": 1257,
            "src": "919:113:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              669
            ],
            "body": {
              "id": 1190,
              "nodeType": "Block",
              "src": "1233:30:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1188,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1186,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1184,
                      "src": "1239:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1187,
                      "name": "nftSymbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1151,
                      "src": "1249:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "1239:19:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1189,
                  "nodeType": "ExpressionStatement",
                  "src": "1239:19:13"
                }
              ]
            },
            "documentation": {
              "id": 1180,
              "nodeType": "StructuredDocumentation",
              "src": "1036:103:13",
              "text": " @dev Returns an abbreviated name for NFTokens.\n @return _symbol Representing symbol."
            },
            "functionSelector": "95d89b41",
            "id": 1191,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1182,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1177:8:13"
            },
            "parameters": {
              "id": 1181,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1157:2:13"
            },
            "returnParameters": {
              "id": 1185,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1184,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1191,
                  "src": "1208:21:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1183,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1208:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1207:23:13"
            },
            "scope": 1257,
            "src": "1142:121:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              677
            ],
            "body": {
              "id": 1207,
              "nodeType": "Block",
              "src": "1545:35:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 1203,
                      "name": "idToUri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1156,
                      "src": "1558:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                        "typeString": "mapping(uint256 => string storage ref)"
                      }
                    },
                    "id": 1205,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 1204,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1194,
                      "src": "1566:8:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1558:17:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1202,
                  "id": 1206,
                  "nodeType": "Return",
                  "src": "1551:24:13"
                }
              ]
            },
            "documentation": {
              "id": 1192,
              "nodeType": "StructuredDocumentation",
              "src": "1267:139:13",
              "text": " @dev A distinct URI (RFC 3986) for a given NFT.\n @param _tokenId Id for which we want uri.\n @return URI of _tokenId."
            },
            "functionSelector": "c87b56dd",
            "id": 1208,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1198,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1194,
                    "src": "1505:8:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1199,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1197,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1435,
                  "src": "1492:12:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1492:22:13"
              }
            ],
            "name": "tokenURI",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1196,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1470:8:13"
            },
            "parameters": {
              "id": 1195,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1194,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1208,
                  "src": "1432:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1193,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1432:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1426:26:13"
            },
            "returnParameters": {
              "id": 1202,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1201,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1208,
                  "src": "1528:13:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1200,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1528:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1527:15:13"
            },
            "scope": 1257,
            "src": "1409:171:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              1798
            ],
            "body": {
              "id": 1237,
              "nodeType": "Block",
              "src": "2054:123:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1218,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1211,
                        "src": "2072:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1215,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2060:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadata_$1257",
                          "typeString": "contract super NFTokenMetadata"
                        }
                      },
                      "id": 1217,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1798,
                      "src": "2060:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1219,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2060:21:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1220,
                  "nodeType": "ExpressionStatement",
                  "src": "2060:21:13"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1229,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1223,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1156,
                              "src": "2098:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 1225,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1224,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1211,
                              "src": "2106:8:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2098:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          ],
                          "id": 1222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2092:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 1221,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "2092:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            }
                          }
                        },
                        "id": 1226,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2092:24:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes storage pointer"
                        }
                      },
                      "id": 1227,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "2092:31:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1228,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2127:1:13",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2092:36:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1236,
                  "nodeType": "IfStatement",
                  "src": "2088:85:13",
                  "trueBody": {
                    "id": 1235,
                    "nodeType": "Block",
                    "src": "2134:39:13",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1233,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "2142:24:13",
                          "subExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1230,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1156,
                              "src": "2149:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 1232,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1231,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1211,
                              "src": "2157:8:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2149:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1234,
                        "nodeType": "ExpressionStatement",
                        "src": "2142:24:13"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 1209,
              "nodeType": "StructuredDocumentation",
              "src": "1584:386:13",
              "text": " @dev Burns a NFT.\n @notice This is an internal function which should be called from user-implemented external\n burn function. Its purpose is to show and properly initialize data structures when using this\n implementation. Also, note that this burn implementation allows the minter to re-mint a burned\n NFT.\n @param _tokenId ID of the NFT to be burned."
            },
            "id": 1238,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1213,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2031:8:13"
            },
            "parameters": {
              "id": 1212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1211,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1238,
                  "src": "1993:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1210,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1993:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1987:26:13"
            },
            "returnParameters": {
              "id": 1214,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2054:0:13"
            },
            "scope": 1257,
            "src": "1973:204:13",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1255,
              "nodeType": "Block",
              "src": "2676:35:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1249,
                        "name": "idToUri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1156,
                        "src": "2682:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                          "typeString": "mapping(uint256 => string storage ref)"
                        }
                      },
                      "id": 1251,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 1250,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1241,
                        "src": "2690:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2682:17:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1252,
                      "name": "_uri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1243,
                      "src": "2702:4:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2682:24:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1254,
                  "nodeType": "ExpressionStatement",
                  "src": "2682:24:13"
                }
              ]
            },
            "documentation": {
              "id": 1239,
              "nodeType": "StructuredDocumentation",
              "src": "2181:378:13",
              "text": " @dev Set a distinct URI (RFC 3986) for a given NFT ID.\n @notice This is an internal function which should be called from user-implemented external\n function. Its purpose is to show and properly initialize data structures when using this\n implementation.\n @param _tokenId Id for which we want uri.\n @param _uri String representing RFC 3986 URI."
            },
            "id": 1256,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1246,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1241,
                    "src": "2664:8:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1247,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1245,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1435,
                  "src": "2651:12:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2651:22:13"
              }
            ],
            "name": "_setTokenUri",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1244,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1241,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1256,
                  "src": "2589:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1240,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2589:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1243,
                  "mutability": "mutable",
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1256,
                  "src": "2611:18:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1242,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2611:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2583:50:13"
            },
            "returnParameters": {
              "id": 1248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2676:0:13"
            },
            "scope": 1257,
            "src": "2562:149:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1258,
        "src": "222:2492:13"
      }
    ],
    "src": "40:2675:13"
  },
  "legacyAST": {
    "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/nf-token-metadata.sol",
    "exportedSymbols": {
      "NFTokenMetadata": [
        1257
      ]
    },
    "id": 1258,
    "license": "UNLICENSED",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1138,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".25",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "40:32:13"
      },
      {
        "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/nf-token.sol",
        "file": "./nf-token.sol",
        "id": 1139,
        "nodeType": "ImportDirective",
        "scope": 1258,
        "sourceUnit": 1978,
        "src": "74:24:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/mnt/c/Users/Sam/Documents/crypto-clicker/contracts/tokens/erc721-metadata.sol",
        "file": "./erc721-metadata.sol",
        "id": 1140,
        "nodeType": "ImportDirective",
        "scope": 1258,
        "sourceUnit": 679,
        "src": "99:31:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1142,
              "name": "NFToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1977,
              "src": "252:7:13",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NFToken_$1977",
                "typeString": "contract NFToken"
              }
            },
            "id": 1143,
            "nodeType": "InheritanceSpecifier",
            "src": "252:7:13"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1144,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 678,
              "src": "263:14:13",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$678",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 1145,
            "nodeType": "InheritanceSpecifier",
            "src": "263:14:13"
          }
        ],
        "contractDependencies": [
          678,
          809,
          1977,
          2021,
          2058
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 1141,
          "nodeType": "StructuredDocumentation",
          "src": "132:89:13",
          "text": " @dev Optional metadata implementation for ERC-721 non-fungible token standard."
        },
        "fullyImplemented": true,
        "id": 1257,
        "linearizedBaseContracts": [
          1257,
          678,
          1977,
          2058,
          2021,
          809
        ],
        "name": "NFTokenMetadata",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 1146,
              "nodeType": "StructuredDocumentation",
              "src": "283:64:13",
              "text": " @dev A descriptive name for a collection of NFTs."
            },
            "id": 1148,
            "mutability": "mutable",
            "name": "nftName",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1257,
            "src": "350:23:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1147,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "350:6:13",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1149,
              "nodeType": "StructuredDocumentation",
              "src": "378:53:13",
              "text": " @dev An abbreviated name for NFTokens."
            },
            "id": 1151,
            "mutability": "mutable",
            "name": "nftSymbol",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1257,
            "src": "434:25:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1150,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "434:6:13",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "documentation": {
              "id": 1152,
              "nodeType": "StructuredDocumentation",
              "src": "464:56:13",
              "text": " @dev Mapping from NFT ID to metadata uri."
            },
            "id": 1156,
            "mutability": "mutable",
            "name": "idToUri",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 1257,
            "src": "523:44:13",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
              "typeString": "mapping(uint256 => string)"
            },
            "typeName": {
              "id": 1155,
              "keyType": {
                "id": 1153,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "532:7:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "523:27:13",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                "typeString": "mapping(uint256 => string)"
              },
              "valueType": {
                "id": 1154,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "543:6:13",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1166,
              "nodeType": "Block",
              "src": "731:67:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1164,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1160,
                        "name": "supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2032,
                        "src": "737:19:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 1162,
                      "indexExpression": {
                        "argumentTypes": null,
                        "hexValue": "30783562356531333966",
                        "id": 1161,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "757:10:13",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1532892063_by_1",
                          "typeString": "int_const 1532892063"
                        },
                        "value": "0x5b5e139f"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "737:31:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1163,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "771:4:13",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "737:38:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1165,
                  "nodeType": "ExpressionStatement",
                  "src": "737:38:13"
                }
              ]
            },
            "documentation": {
              "id": 1157,
              "nodeType": "StructuredDocumentation",
              "src": "572:129:13",
              "text": " @dev Contract constructor.\n @notice When implementing this contract don't forget to set nftName and nftSymbol."
            },
            "id": 1167,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1158,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "715:2:13"
            },
            "returnParameters": {
              "id": 1159,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "731:0:13"
            },
            "scope": 1257,
            "src": "704:94:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              663
            ],
            "body": {
              "id": 1178,
              "nodeType": "Block",
              "src": "1006:26:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1176,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1174,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1172,
                      "src": "1012:5:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1175,
                      "name": "nftName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1148,
                      "src": "1020:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "1012:15:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1177,
                  "nodeType": "ExpressionStatement",
                  "src": "1012:15:13"
                }
              ]
            },
            "documentation": {
              "id": 1168,
              "nodeType": "StructuredDocumentation",
              "src": "802:114:13",
              "text": " @dev Returns a descriptive name for a collection of NFTokens.\n @return _name Representing name."
            },
            "functionSelector": "06fdde03",
            "id": 1179,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1170,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "952:8:13"
            },
            "parameters": {
              "id": 1169,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "932:2:13"
            },
            "returnParameters": {
              "id": 1173,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1172,
                  "mutability": "mutable",
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1179,
                  "src": "983:19:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1171,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "983:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "982:21:13"
            },
            "scope": 1257,
            "src": "919:113:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              669
            ],
            "body": {
              "id": 1190,
              "nodeType": "Block",
              "src": "1233:30:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1188,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1186,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1184,
                      "src": "1239:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1187,
                      "name": "nftSymbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1151,
                      "src": "1249:9:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "1239:19:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1189,
                  "nodeType": "ExpressionStatement",
                  "src": "1239:19:13"
                }
              ]
            },
            "documentation": {
              "id": 1180,
              "nodeType": "StructuredDocumentation",
              "src": "1036:103:13",
              "text": " @dev Returns an abbreviated name for NFTokens.\n @return _symbol Representing symbol."
            },
            "functionSelector": "95d89b41",
            "id": 1191,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1182,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1177:8:13"
            },
            "parameters": {
              "id": 1181,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1157:2:13"
            },
            "returnParameters": {
              "id": 1185,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1184,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1191,
                  "src": "1208:21:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1183,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1208:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1207:23:13"
            },
            "scope": 1257,
            "src": "1142:121:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              677
            ],
            "body": {
              "id": 1207,
              "nodeType": "Block",
              "src": "1545:35:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 1203,
                      "name": "idToUri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1156,
                      "src": "1558:7:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                        "typeString": "mapping(uint256 => string storage ref)"
                      }
                    },
                    "id": 1205,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 1204,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1194,
                      "src": "1566:8:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1558:17:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1202,
                  "id": 1206,
                  "nodeType": "Return",
                  "src": "1551:24:13"
                }
              ]
            },
            "documentation": {
              "id": 1192,
              "nodeType": "StructuredDocumentation",
              "src": "1267:139:13",
              "text": " @dev A distinct URI (RFC 3986) for a given NFT.\n @param _tokenId Id for which we want uri.\n @return URI of _tokenId."
            },
            "functionSelector": "c87b56dd",
            "id": 1208,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1198,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1194,
                    "src": "1505:8:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1199,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1197,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1435,
                  "src": "1492:12:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1492:22:13"
              }
            ],
            "name": "tokenURI",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1196,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1470:8:13"
            },
            "parameters": {
              "id": 1195,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1194,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1208,
                  "src": "1432:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1193,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1432:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1426:26:13"
            },
            "returnParameters": {
              "id": 1202,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1201,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1208,
                  "src": "1528:13:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1200,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1528:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1527:15:13"
            },
            "scope": 1257,
            "src": "1409:171:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              1798
            ],
            "body": {
              "id": 1237,
              "nodeType": "Block",
              "src": "2054:123:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1218,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1211,
                        "src": "2072:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1215,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "2060:5:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadata_$1257",
                          "typeString": "contract super NFTokenMetadata"
                        }
                      },
                      "id": 1217,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1798,
                      "src": "2060:11:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1219,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2060:21:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1220,
                  "nodeType": "ExpressionStatement",
                  "src": "2060:21:13"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1229,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1223,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1156,
                              "src": "2098:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 1225,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1224,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1211,
                              "src": "2106:8:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2098:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          ],
                          "id": 1222,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2092:5:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": {
                            "id": 1221,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "2092:5:13",
                            "typeDescriptions": {
                              "typeIdentifier": null,
                              "typeString": null
                            }
                          }
                        },
                        "id": 1226,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2092:24:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes storage pointer"
                        }
                      },
                      "id": 1227,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "2092:31:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1228,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2127:1:13",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "2092:36:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1236,
                  "nodeType": "IfStatement",
                  "src": "2088:85:13",
                  "trueBody": {
                    "id": 1235,
                    "nodeType": "Block",
                    "src": "2134:39:13",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1233,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "2142:24:13",
                          "subExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1230,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1156,
                              "src": "2149:7:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 1232,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1231,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1211,
                              "src": "2157:8:13",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2149:17:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1234,
                        "nodeType": "ExpressionStatement",
                        "src": "2142:24:13"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 1209,
              "nodeType": "StructuredDocumentation",
              "src": "1584:386:13",
              "text": " @dev Burns a NFT.\n @notice This is an internal function which should be called from user-implemented external\n burn function. Its purpose is to show and properly initialize data structures when using this\n implementation. Also, note that this burn implementation allows the minter to re-mint a burned\n NFT.\n @param _tokenId ID of the NFT to be burned."
            },
            "id": 1238,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1213,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2031:8:13"
            },
            "parameters": {
              "id": 1212,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1211,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1238,
                  "src": "1993:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1210,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1993:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1987:26:13"
            },
            "returnParameters": {
              "id": 1214,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2054:0:13"
            },
            "scope": 1257,
            "src": "1973:204:13",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1255,
              "nodeType": "Block",
              "src": "2676:35:13",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1253,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1249,
                        "name": "idToUri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1156,
                        "src": "2682:7:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                          "typeString": "mapping(uint256 => string storage ref)"
                        }
                      },
                      "id": 1251,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 1250,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1241,
                        "src": "2690:8:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2682:17:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1252,
                      "name": "_uri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1243,
                      "src": "2702:4:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2682:24:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1254,
                  "nodeType": "ExpressionStatement",
                  "src": "2682:24:13"
                }
              ]
            },
            "documentation": {
              "id": 1239,
              "nodeType": "StructuredDocumentation",
              "src": "2181:378:13",
              "text": " @dev Set a distinct URI (RFC 3986) for a given NFT ID.\n @notice This is an internal function which should be called from user-implemented external\n function. Its purpose is to show and properly initialize data structures when using this\n implementation.\n @param _tokenId Id for which we want uri.\n @param _uri String representing RFC 3986 URI."
            },
            "id": 1256,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1246,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1241,
                    "src": "2664:8:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1247,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1245,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1435,
                  "src": "2651:12:13",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2651:22:13"
              }
            ],
            "name": "_setTokenUri",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 1244,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1241,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1256,
                  "src": "2589:16:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1240,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2589:7:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1243,
                  "mutability": "mutable",
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 1256,
                  "src": "2611:18:13",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1242,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2611:6:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2583:50:13"
            },
            "returnParameters": {
              "id": 1248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2676:0:13"
            },
            "scope": 1257,
            "src": "2562:149:13",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1258,
        "src": "222:2492:13"
      }
    ],
    "src": "40:2675:13"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.11+commit.5ef660b1.Emscripten.clang"
  },
  "networks": {
    "3": {
      "events": {
        "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "_approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "_operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "_approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "_to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x84c2A9947609c5bb473A267ad473c597f2bd729b",
      "transactionHash": "0x5ea7349f4fd422818fc1bb07f03a1dcccef0840cbda1ffdb5f09cbb9c46d7c12"
    }
  },
  "schemaVersion": "3.2.2",
  "updatedAt": "2020-07-18T09:59:12.575Z",
  "networkType": "ethereum",
  "devdoc": {
    "details": "Optional metadata implementation for ERC-721 non-fungible token standard.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.",
          "_tokenId": "ID of the token to be approved."
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
        "params": {
          "_owner": "Address for whom to query the balance."
        },
        "returns": {
          "_0": "Balance of _owner."
        }
      },
      "constructor": {
        "details": "Contract constructor."
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of."
        },
        "returns": {
          "_0": "Address that _tokenId is approved for."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.",
        "params": {
          "_operator": "The address that acts on behalf of the owner.",
          "_owner": "The address that owns the NFTs."
        },
        "returns": {
          "_0": "True if approved for all, false otherwise."
        }
      },
      "name()": {
        "details": "Returns a descriptive name for a collection of NFTokens.",
        "returns": {
          "_name": "Representing name."
        }
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.",
        "params": {
          "_tokenId": "The identifier for an NFT."
        },
        "returns": {
          "_owner": "Address of _tokenId owner."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.",
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.",
          "_operator": "Address to add to the set of authorized operators."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Function to check which interfaces are suported by this contract.",
        "params": {
          "_interfaceID": "Id of the interface."
        },
        "returns": {
          "_0": "True if _interfaceID is supported, false otherwise."
        }
      },
      "symbol()": {
        "details": "Returns an abbreviated name for NFTokens.",
        "returns": {
          "_symbol": "Representing symbol."
        }
      },
      "tokenURI(uint256)": {
        "details": "A distinct URI (RFC 3986) for a given NFT.",
        "params": {
          "_tokenId": "Id for which we want uri."
        },
        "returns": {
          "_0": "URI of _tokenId."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      }
    },
    "stateVariables": {
      "idToUri": {
        "details": "Mapping from NFT ID to metadata uri."
      },
      "nftName": {
        "details": "A descriptive name for a collection of NFTs."
      },
      "nftSymbol": {
        "details": "An abbreviated name for NFTokens."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."
      },
      "constructor": "When implementing this contract don't forget to set nftName and nftSymbol.",
      "getApproved(uint256)": {
        "notice": "Throws if `_tokenId` is not a valid NFT."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "This works identically to the other function with an extra data parameter, except this function just sets data to \"\""
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost."
      }
    },
    "version": 1
  }
}